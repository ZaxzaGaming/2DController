//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Scripts/Player/PlayerInput/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""730575e9-291f-4af6-8446-4e68d47424b9"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ef90d4fe-7d56-4e79-bfb3-d60b00a756d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4d2dcfdb-b836-42f1-98b2-dd90df58add1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a881da51-780a-4eb1-8c46-02f020c3a0cc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""cd69bd72-7157-4b08-aa78-800314332515"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9f05a449-a8c0-49a7-8663-8556c8977348"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""3c823491-30b6-4564-a32b-3354ab883e91"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ba61e310-fde5-426b-b990-305bb85d9762"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""ArrowKeys"",
                    ""id"": ""bedca76e-a03e-47ce-b948-132e3686dce0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb5a57f1-ba4e-4c47-9c72-a49b94687219"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9e4eb4b7-0e49-41c0-9370-9af51ea6300a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""90343d5c-d360-41d2-a0d3-fa2adda4da83"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b7e0bdc6-5422-4d86-b3b7-23b6e1f02894"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Jump"",
            ""id"": ""5184d8bc-4257-4c58-8553-05f8478d6fef"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""864bc2d5-794c-4bc1-9688-8524cb059ca1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d9789df3-c51b-4e1e-b93b-b40344ba8c9c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9128a644-c4b9-4902-911b-c66f7737c117"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Attack1"",
            ""id"": ""21ddd5d1-3852-4a64-b287-0ed7f769b6a7"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4ef7d79f-5ad4-47d3-88c6-fe28767b7e75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40d74267-eab3-404a-b5de-7a878b14c05f"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a048fa9f-7909-4fc2-9080-4f4a81a5a781"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Dash"",
            ""id"": ""e488d043-71a7-4933-9992-a66e7719fba4"",
            ""actions"": [
                {
                    ""name"": ""Dash"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4595c9ca-7e54-4901-b783-7ccd3b337bee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""037882f8-280e-43b4-b3e6-4d05279a1f1e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6f887bb-d673-44ec-8eee-aa875bf1e248"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Glide"",
            ""id"": ""2f7b6f46-3ff3-40c0-a6f2-2149bb1cbd37"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5f29b9e0-55ba-48e4-9caf-4dbd6451204d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Glide"",
                    ""type"": ""Button"",
                    ""id"": ""75c1c3bc-c51a-4428-9ad9-99f05ec9797a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8373f80c-fd92-4505-9d0f-d5af9ca5c830"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f51cb3d-691f-4ef8-9d17-778279a11a40"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77e759cc-edcb-4e17-ac7d-a090c703c359"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Glide"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Grapple"",
            ""id"": ""76bf9041-68e5-4a11-b156-daa82295465b"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""PassThrough"",
                    ""id"": ""5aece6cf-77fa-413c-9fa8-eea9bf86e2da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grapple"",
                    ""type"": ""Button"",
                    ""id"": ""82dde86d-3122-485b-8a10-1d9720142b24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ea9ce45d-261a-419e-b59e-62507409ecbd"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b5067bb-571a-4e77-a22f-9309df7b695f"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c82976d9-177c-4b9f-bdff-daf3544a94dd"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""GamePad"",
                    ""action"": ""Grapple"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""GamePad"",
            ""bindingGroup"": ""GamePad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_Move = m_Movement.FindAction("Move", throwIfNotFound: true);
        // Jump
        m_Jump = asset.FindActionMap("Jump", throwIfNotFound: true);
        m_Jump_Jump = m_Jump.FindAction("Jump", throwIfNotFound: true);
        // Attack1
        m_Attack1 = asset.FindActionMap("Attack1", throwIfNotFound: true);
        m_Attack1_Attack = m_Attack1.FindAction("Attack", throwIfNotFound: true);
        // Dash
        m_Dash = asset.FindActionMap("Dash", throwIfNotFound: true);
        m_Dash_Dash = m_Dash.FindAction("Dash", throwIfNotFound: true);
        // Glide
        m_Glide = asset.FindActionMap("Glide", throwIfNotFound: true);
        m_Glide_Newaction = m_Glide.FindAction("New action", throwIfNotFound: true);
        m_Glide_Glide = m_Glide.FindAction("Glide", throwIfNotFound: true);
        // Grapple
        m_Grapple = asset.FindActionMap("Grapple", throwIfNotFound: true);
        m_Grapple_Newaction = m_Grapple.FindAction("New action", throwIfNotFound: true);
        m_Grapple_Grapple = m_Grapple.FindAction("Grapple", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private IMovementActions m_MovementActionsCallbackInterface;
    private readonly InputAction m_Movement_Move;
    public struct MovementActions
    {
        private @Controls m_Wrapper;
        public MovementActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Movement_Move;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void SetCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_MovementActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_MovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // Jump
    private readonly InputActionMap m_Jump;
    private IJumpActions m_JumpActionsCallbackInterface;
    private readonly InputAction m_Jump_Jump;
    public struct JumpActions
    {
        private @Controls m_Wrapper;
        public JumpActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Jump_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Jump; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(JumpActions set) { return set.Get(); }
        public void SetCallbacks(IJumpActions instance)
        {
            if (m_Wrapper.m_JumpActionsCallbackInterface != null)
            {
                @Jump.started -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_JumpActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_JumpActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public JumpActions @Jump => new JumpActions(this);

    // Attack1
    private readonly InputActionMap m_Attack1;
    private IAttack1Actions m_Attack1ActionsCallbackInterface;
    private readonly InputAction m_Attack1_Attack;
    public struct Attack1Actions
    {
        private @Controls m_Wrapper;
        public Attack1Actions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_Attack1_Attack;
        public InputActionMap Get() { return m_Wrapper.m_Attack1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Attack1Actions set) { return set.Get(); }
        public void SetCallbacks(IAttack1Actions instance)
        {
            if (m_Wrapper.m_Attack1ActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_Attack1ActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_Attack1ActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_Attack1ActionsCallbackInterface.OnAttack;
            }
            m_Wrapper.m_Attack1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
            }
        }
    }
    public Attack1Actions @Attack1 => new Attack1Actions(this);

    // Dash
    private readonly InputActionMap m_Dash;
    private IDashActions m_DashActionsCallbackInterface;
    private readonly InputAction m_Dash_Dash;
    public struct DashActions
    {
        private @Controls m_Wrapper;
        public DashActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Dash => m_Wrapper.m_Dash_Dash;
        public InputActionMap Get() { return m_Wrapper.m_Dash; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DashActions set) { return set.Get(); }
        public void SetCallbacks(IDashActions instance)
        {
            if (m_Wrapper.m_DashActionsCallbackInterface != null)
            {
                @Dash.started -= m_Wrapper.m_DashActionsCallbackInterface.OnDash;
                @Dash.performed -= m_Wrapper.m_DashActionsCallbackInterface.OnDash;
                @Dash.canceled -= m_Wrapper.m_DashActionsCallbackInterface.OnDash;
            }
            m_Wrapper.m_DashActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
            }
        }
    }
    public DashActions @Dash => new DashActions(this);

    // Glide
    private readonly InputActionMap m_Glide;
    private IGlideActions m_GlideActionsCallbackInterface;
    private readonly InputAction m_Glide_Newaction;
    private readonly InputAction m_Glide_Glide;
    public struct GlideActions
    {
        private @Controls m_Wrapper;
        public GlideActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Glide_Newaction;
        public InputAction @Glide => m_Wrapper.m_Glide_Glide;
        public InputActionMap Get() { return m_Wrapper.m_Glide; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlideActions set) { return set.Get(); }
        public void SetCallbacks(IGlideActions instance)
        {
            if (m_Wrapper.m_GlideActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_GlideActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_GlideActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_GlideActionsCallbackInterface.OnNewaction;
                @Glide.started -= m_Wrapper.m_GlideActionsCallbackInterface.OnGlide;
                @Glide.performed -= m_Wrapper.m_GlideActionsCallbackInterface.OnGlide;
                @Glide.canceled -= m_Wrapper.m_GlideActionsCallbackInterface.OnGlide;
            }
            m_Wrapper.m_GlideActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @Glide.started += instance.OnGlide;
                @Glide.performed += instance.OnGlide;
                @Glide.canceled += instance.OnGlide;
            }
        }
    }
    public GlideActions @Glide => new GlideActions(this);

    // Grapple
    private readonly InputActionMap m_Grapple;
    private IGrappleActions m_GrappleActionsCallbackInterface;
    private readonly InputAction m_Grapple_Newaction;
    private readonly InputAction m_Grapple_Grapple;
    public struct GrappleActions
    {
        private @Controls m_Wrapper;
        public GrappleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Grapple_Newaction;
        public InputAction @Grapple => m_Wrapper.m_Grapple_Grapple;
        public InputActionMap Get() { return m_Wrapper.m_Grapple; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GrappleActions set) { return set.Get(); }
        public void SetCallbacks(IGrappleActions instance)
        {
            if (m_Wrapper.m_GrappleActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_GrappleActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_GrappleActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_GrappleActionsCallbackInterface.OnNewaction;
                @Grapple.started -= m_Wrapper.m_GrappleActionsCallbackInterface.OnGrapple;
                @Grapple.performed -= m_Wrapper.m_GrappleActionsCallbackInterface.OnGrapple;
                @Grapple.canceled -= m_Wrapper.m_GrappleActionsCallbackInterface.OnGrapple;
            }
            m_Wrapper.m_GrappleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
                @Grapple.started += instance.OnGrapple;
                @Grapple.performed += instance.OnGrapple;
                @Grapple.canceled += instance.OnGrapple;
            }
        }
    }
    public GrappleActions @Grapple => new GrappleActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamePadSchemeIndex = -1;
    public InputControlScheme GamePadScheme
    {
        get
        {
            if (m_GamePadSchemeIndex == -1) m_GamePadSchemeIndex = asset.FindControlSchemeIndex("GamePad");
            return asset.controlSchemes[m_GamePadSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IJumpActions
    {
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IAttack1Actions
    {
        void OnAttack(InputAction.CallbackContext context);
    }
    public interface IDashActions
    {
        void OnDash(InputAction.CallbackContext context);
    }
    public interface IGlideActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnGlide(InputAction.CallbackContext context);
    }
    public interface IGrappleActions
    {
        void OnNewaction(InputAction.CallbackContext context);
        void OnGrapple(InputAction.CallbackContext context);
    }
}
